// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of accounts with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Get Accounts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of accounts per page (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by department",
                        "name": "department",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_server.AccountResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get total accounts and counts per status (ACTIVE, INACTIVE, PENDING)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Get Accounts Metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.AccountMetricsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Register Account",
                "parameters": [
                    {
                        "description": "Create Account Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid query params",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/setup": {
            "post": {
                "description": "Setup a new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account-client"
                ],
                "summary": "Setup Account",
                "parameters": [
                    {
                        "description": "Setup Account Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.SetupAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid query params",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get account by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Get Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Delete Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{id}/department": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Update Account Department",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Department",
                        "name": "department",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateAccountDepartmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{id}/role": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Update Account Role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Role",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateAccountRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts-admin"
                ],
                "summary": "Update Account Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateAccountStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/report": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of citizen reports with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get all Citizen Reports",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by district",
                        "name": "district",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_server.CitizenReportResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/report/clusters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve clusters of illegal mining reports within a date range, ranked by report count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get Clustered Illegal Mining Reports",
                "parameters": [
                    {
                        "type": "string",
                        "default": "2025-01-01T00:00:00Z",
                        "example": "2025-01-01T00:00:00Z",
                        "description": "Start date (RFC3339)",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "2025-06-01T00:00:00Z",
                        "example": "2025-06-01T00:00:00Z",
                        "description": "End date (RFC3339)",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 500,
                        "example": 1000,
                        "description": "Clustering distance (meters)",
                        "name": "eps",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "example": 5,
                        "description": "Minimum reports per cluster",
                        "name": "minSamples",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Maximum clusters to return",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_server.ClusterResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/report/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get total number of reports, and counts per severity level",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get Reports Metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ReportMetricsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/report/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a single citizen report by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get a Citizen Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.CitizenReportResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/report/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a citizen report to IN REVIEW or CLOSED",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Update Citizen Report Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Report Status Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateReportStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.CitizenReportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/alerts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of alerts for the authenticated user with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get Alerts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of alerts per page (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by alert type (new_site, new_report)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by read status (true/false)",
                        "name": "is_read",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by related entity type (task, reports)",
                        "name": "related_entity_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_server.AlertResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/alerts/bulk-update": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the read status of multiple alerts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Bulk Update Alerts Read Status",
                "parameters": [
                    {
                        "description": "Bulk update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.BulkUpdateAlertsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/alerts/mark-all-read": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark all unread alerts as read for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Mark All Alerts as Read",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/alerts/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the read status of a specific alert",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Update Alert Read Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Alert ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update read status request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateAlertReadStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.AlertResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login Account",
                "parameters": [
                    {
                        "description": "Account Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.AccountLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout account by deleting session and clearing cookies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout Account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/renew": {
            "post": {
                "description": "Generates a new access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Renew Access Token",
                "parameters": [
                    {
                        "description": "Refresh Token Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal_server.renewAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.renewAccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or Invalid token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/send-otp": {
            "post": {
                "description": "Resend OTP to a verified account's email if previous OTP is expired",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend OTP",
                "parameters": [
                    {
                        "description": "Send OTP Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.SendOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP resent successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Email not verified or OTP not expired",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "OTP still valid, wait before requesting new one",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Verifies the OTP sent to the account's email and generates access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify 2FA OTP to complete login",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful verification and login",
                        "schema": {
                            "$ref": "#/definitions/internal_server.AccountLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Invalid email or OTP",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/concessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of all mining concessions with details like name, owner, type, status, assets, start date, and expiry date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Concessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ConcessionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve concessions",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/districts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of all districts with district and region information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Districts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.DistrictsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve districts",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/districts/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of district names matching the provided name (case-insensitive partial match) or first 10 districts if no name provided",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Search Districts by Name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name to search for",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.DistrictSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to search districts",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/forest-reserves": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of all forest reserves with name and category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Forest Reserves",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ForestReservesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve forest reserves",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/heatmap-data": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of priority index heatmap points for a given date range with type and weight",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Priority Index Heatmap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.PriorityIndexHeatmapResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid or missing date parameters",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve priority index heatmap",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all metrics and chart data for the dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Metrics Data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.MetricsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/mining-sites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of all mining sites with details like ID, district, area, severity, and detection date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Mining Sites",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.MiningSitesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve mining sites",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/mining-sites/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a mining site to  UNDER_REVIEW, FALSE_POSITIVE, or VERIFIED",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Update Mining Site Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mining Site ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Mining Status Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateMiningStaticStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.MiningStaticResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID or request body",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update mining site status",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/rivers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a GeoJSON FeatureCollection of all rivers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get Rivers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.RiversResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new citizen report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Create a Citizen Report",
                "parameters": [
                    {
                        "description": "Create Citzen Report Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.CreateCitizenReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_server.CitizenReportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the authenticated user's profile and preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get User Settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.SettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the authenticated user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update User Password",
                "parameters": [
                    {
                        "description": "Password details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/preferences": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the authenticated user's preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update User Preferences",
                "parameters": [
                    {
                        "description": "Preferences",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdatePreferencesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.SettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/preferences/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset the authenticated user's preferences to default values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Reset User Preferences",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.SettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/profile": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the authenticated user's profile details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "Profile details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.SettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/upload-url": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a presigned S3 URL for uploading a profile image in supported formats (JPEG, PNG, WEBP, GIF). Accepts an optional ` + "`" + `mime` + "`" + ` query parameter to specify the desired image MIME type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Generate presigned URL for profile image upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MIME type of the image (default: image/jpeg). Allowed: image/jpeg, image/png, image/webp, image/gif",
                        "name": "mime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Presigned upload URL and public file URL",
                        "schema": {
                            "$ref": "#/definitions/internal_server.GetProfileUploadURLResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or unsupported MIME type",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/task": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all tasks with pagination. Supports filtering by passing ` + "`" + `user_id` + "`" + ` as a query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get all created Tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_server.TaskResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create Task",
                "parameters": [
                    {
                        "description": "Create Task Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_server.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/task/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get task by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get Task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/task/{id}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Wait until a task's status changes from PENDING before responding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Long Poll Task Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of an existing task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update Task Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Task Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_server.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_server.AccountLoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123{#Pbb"
                }
            }
        },
        "internal_server.AccountLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "SessionID             uuid.UUID    ` + "`" + `json:\"session_id\" example:\"123e4567-e89b-12d3-a456-426614174000\"` + "`" + `",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "access_token_expires_at": {
                    "type": "string",
                    "example": "2025-02-05T13:15:08Z"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "refresh_token_expires_at": {
                    "type": "string",
                    "example": "2025-02-06T13:15:08Z"
                },
                "user": {
                    "$ref": "#/definitions/internal_server.AccountResponse"
                }
            }
        },
        "internal_server.AccountMetricsResponse": {
            "type": "object",
            "properties": {
                "active_users": {
                    "type": "integer",
                    "example": 8
                },
                "inactive_users": {
                    "type": "integer",
                    "example": 0
                },
                "pending_invites": {
                    "type": "integer",
                    "example": 2
                },
                "total_accounts": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "internal_server.AccountResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "department": {
                    "type": "string",
                    "example": "Minerals Department"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John_doe11"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_active": {
                    "type": "string",
                    "example": "2025-01-02T12:00:00Z"
                },
                "last_name": {
                    "type": "string",
                    "example": "John_doe11"
                },
                "role": {
                    "type": "string",
                    "example": "ADMIN"
                },
                "status": {
                    "type": "string",
                    "example": "ACTIVE"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-02T12:00:00Z"
                },
                "user_name": {
                    "type": "string",
                    "example": "John_doe142"
                }
            }
        },
        "internal_server.AlertResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "223e4567-e89b-12d3-a456-426614174000"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-28T04:08:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_read": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "New mining site detected near river"
                },
                "related_entity_id": {
                    "type": "string",
                    "example": "323e4567-e89b-12d3-a456-426614174000"
                },
                "related_entity_type": {
                    "type": "string",
                    "example": "mining_site"
                },
                "type": {
                    "type": "string",
                    "example": "new_site"
                }
            }
        },
        "internal_server.BulkUpdateAlertsRequest": {
            "type": "object",
            "required": [
                "alert_ids",
                "is_read"
            ],
            "properties": {
                "alert_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "is_read": {
                    "type": "boolean"
                }
            }
        },
        "internal_server.CitizenReportResponse": {
            "type": "object",
            "required": [
                "created_at",
                "locality",
                "location",
                "severity",
                "status",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Illegal mining activity detected in Tarkwa Mining Zone A."
                },
                "district": {
                    "type": "string",
                    "example": "SHAMA"
                },
                "id": {
                    "type": "string"
                },
                "locality": {
                    "type": "string",
                    "example": "Akropong"
                },
                "location": {
                    "$ref": "#/definitions/util.Coord"
                },
                "severity": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                    ],
                    "example": "MEDIUM"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "OPEN",
                        "IN_REVIEW",
                        "RESOLVED",
                        "CLOSED"
                    ],
                    "example": "PENDING"
                },
                "title": {
                    "type": "string",
                    "example": "Illegal Mining Activity"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-02T12:00:00Z"
                }
            }
        },
        "internal_server.ClusterResponse": {
            "type": "object",
            "properties": {
                "centroid": {
                    "type": "string"
                },
                "cluster_id": {
                    "type": "string"
                },
                "report_count": {
                    "type": "integer"
                },
                "report_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_server.ConcessionProperties": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "string",
                    "example": "3D model"
                },
                "expiry_date": {
                    "type": "string",
                    "example": "2025-01-01"
                },
                "name": {
                    "type": "string",
                    "example": "Block A"
                },
                "owner": {
                    "type": "string",
                    "example": "John Doe"
                },
                "start_date": {
                    "type": "string",
                    "example": "2023-01-01"
                },
                "status": {
                    "type": "string",
                    "example": "OPEN"
                },
                "type": {
                    "type": "string",
                    "example": "mining"
                }
            }
        },
        "internal_server.ConcessionsResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.ConcessionProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.CreateAccountRequest": {
            "type": "object",
            "required": [
                "department",
                "email",
                "role"
            ],
            "properties": {
                "department": {
                    "type": "string",
                    "enum": [
                        "Minerals Commission",
                        "Lands Commission",
                        "Forestry Commission",
                        "Office of Administrator of Stool lands",
                        "Environmental commission",
                        "Goldbod",
                        "Ghana Police",
                        "Ghana Army",
                        "National Security",
                        "Geological Survey Authority",
                        "Wildlife Division",
                        "Ghana Space Science and Technology Institute",
                        "Water Resources Commission",
                        "Land Use and Spatial Planning",
                        "National Anti-Illegal Mining Operations Secretariat",
                        "GADE Team"
                    ],
                    "example": "Minerals Commission"
                },
                "email": {
                    "description": "UserName  string ` + "`" + `json:\"user_name\" binding:\"required\" example:\"John_doe11\"` + "`" + `\nFirstName string ` + "`" + `json:\"first_name\" binding:\"required\" example:\"John\"` + "`" + `\nLastName  string ` + "`" + `json:\"last_name\" binding:\"required\" example:\"John\"` + "`" + `\nPassword  string ` + "`" + `json:\"password\" binding:\"required,StrongPassword\" example:\"password123{#Pbb\"` + "`" + `",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "ADMIN",
                        "STANDARD"
                    ],
                    "example": "ADMIN"
                }
            }
        },
        "internal_server.CreateCitizenReportRequest": {
            "type": "object",
            "required": [
                "locality",
                "location",
                "severity"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Illegal mining activity detected in Tarkwa Mining Zone A."
                },
                "locality": {
                    "type": "string",
                    "example": "Akropong"
                },
                "location": {
                    "$ref": "#/definitions/util.Coord"
                },
                "severity": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                    ],
                    "example": "MEDIUM"
                },
                "title": {
                    "type": "string",
                    "example": "Illegal Mining Activity"
                }
            }
        },
        "internal_server.CreateTaskRequest": {
            "type": "object",
            "required": [
                "aoi_bbox",
                "locality"
            ],
            "properties": {
                "aoi_bbox": {
                    "$ref": "#/definitions/util.BoundingBox"
                },
                "locality": {
                    "type": "string",
                    "example": "Tarkwa Mining Zone A"
                }
            }
        },
        "internal_server.DefaultMapView": {
            "type": "object",
            "required": [
                "lat",
                "lon",
                "zoom"
            ],
            "properties": {
                "lat": {
                    "type": "number",
                    "example": 6.6745
                },
                "lon": {
                    "type": "number",
                    "example": -1.5716
                },
                "zoom": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 12
                }
            }
        },
        "internal_server.DistrictAreaData": {
            "type": "object",
            "properties": {
                "district": {
                    "type": "string",
                    "example": "Ashanti"
                },
                "total_area": {
                    "type": "number",
                    "example": 450.75
                }
            }
        },
        "internal_server.DistrictProperties": {
            "type": "object",
            "properties": {
                "district": {
                    "type": "string",
                    "example": "Central District"
                },
                "region": {
                    "type": "string",
                    "example": "Ashanti"
                }
            }
        },
        "internal_server.DistrictSearchResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Central District",
                        "Northern District"
                    ]
                }
            }
        },
        "internal_server.DistrictsResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.DistrictProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "internal_server.ForestReserveProperties": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "reserve"
                },
                "name": {
                    "type": "string",
                    "example": "Reserve A"
                }
            }
        },
        "internal_server.ForestReservesResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.ForestReserveProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.GetProfileUploadURLResponse": {
            "type": "object",
            "properties": {
                "file_url": {
                    "type": "string",
                    "example": "https://example-bucket.s3.amazonaws.com/profiles/123e4567-e89b-12d3-a456-426614174000/1633036800.jpg"
                },
                "upload_url": {
                    "type": "string",
                    "example": "https://example-bucket.s3.amazonaws.com/profiles/123e4567-e89b-12d3-a456-426614174000/1633036800.jpg"
                }
            }
        },
        "internal_server.Message": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "Failed to Process Task"
                },
                "message": {
                    "type": "string",
                    "example": "Task status updated - COMPLETED"
                },
                "result": {
                    "type": "string",
                    "example": "Task processed successfully"
                },
                "task_id": {
                    "type": "string",
                    "example": "1233-flf4djf-alsdik"
                }
            }
        },
        "internal_server.Metrics": {
            "type": "object",
            "properties": {
                "total_area_detected": {
                    "type": "number",
                    "example": 1500.75
                },
                "total_forest_area_affected": {
                    "type": "number",
                    "example": 300.5
                },
                "total_illegal_sites": {
                    "type": "integer",
                    "example": 120
                },
                "total_reported_cases": {
                    "type": "integer",
                    "example": 75
                }
            }
        },
        "internal_server.MetricsResponse": {
            "type": "object",
            "properties": {
                "area_over_time": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server.TimeSeriesData"
                    }
                },
                "detected_mining_change": {
                    "$ref": "#/definitions/internal_server.MonthlyChange"
                },
                "districts_by_area": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server.DistrictAreaData"
                    }
                },
                "forest_reserve_affected_over_time": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server.TimeSeriesData"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/internal_server.Metrics"
                },
                "reported_cases_change": {
                    "$ref": "#/definitions/internal_server.MonthlyChange"
                },
                "reports_over_time": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server.TimeSeriesData"
                    }
                },
                "severity_distribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server.SeverityDistributionData"
                    }
                }
            }
        },
        "internal_server.MiningSiteProperties": {
            "type": "object",
            "properties": {
                "all_violation_types": {
                    "type": "string",
                    "example": "RIVER_VIOLATION,FOREST_VIOLATION"
                },
                "area": {
                    "type": "number",
                    "example": 1234.56
                },
                "detected_date": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "detection_date": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "distance_to_forest_m": {
                    "type": "number",
                    "example": 300
                },
                "distance_to_water_m": {
                    "type": "number",
                    "example": 150
                },
                "district": {
                    "type": "string",
                    "example": "Central District"
                },
                "id": {
                    "type": "string",
                    "example": "12345"
                },
                "inside_forest_reserve": {
                    "type": "boolean",
                    "example": false
                },
                "proximity_to_water": {
                    "type": "boolean",
                    "example": true
                },
                "severity": {
                    "type": "string",
                    "example": "HIGH"
                },
                "severity_score": {
                    "type": "integer",
                    "example": 5
                },
                "severity_type": {
                    "type": "string",
                    "example": "RIVER_VIOLATION"
                },
                "status": {
                    "type": "string",
                    "example": "OPEN"
                }
            }
        },
        "internal_server.MiningSitesResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.MiningSiteProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.MiningStaticResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "12345"
                },
                "status": {
                    "type": "string",
                    "example": "IN_REVIEW"
                }
            }
        },
        "internal_server.MonthlyChange": {
            "type": "object",
            "properties": {
                "current_month": {
                    "type": "number",
                    "example": 500
                },
                "increase_percent": {
                    "type": "number",
                    "example": 100
                },
                "previous_month": {
                    "type": "number",
                    "example": 250
                }
            }
        },
        "internal_server.PreferencesResponse": {
            "type": "object",
            "properties": {
                "app_theme": {
                    "type": "string",
                    "example": "light"
                },
                "coordinate_format": {
                    "type": "string",
                    "example": "dd"
                },
                "default_mapview": {
                    "$ref": "#/definitions/internal_server.DefaultMapView"
                },
                "notifications_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "units": {
                    "type": "string",
                    "example": "metric"
                }
            }
        },
        "internal_server.PriorityIndexHeatmapResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.PriorityIndexProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.PriorityIndexProperties": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "example": "heatmap_point"
                },
                "weight": {
                    "type": "number",
                    "example": 0.75
                }
            }
        },
        "internal_server.ProfileResponse": {
            "type": "object",
            "required": [
                "user_name"
            ],
            "properties": {
                "department": {
                    "type": "string",
                    "example": "Environmental"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "profile_url": {
                    "type": "string",
                    "example": "https://s3.amazonaws.com/mybucket/user123.png"
                },
                "role": {
                    "type": "string",
                    "example": "STANDARD"
                },
                "user_name": {
                    "type": "string",
                    "example": "dennis_the_menace99"
                }
            }
        },
        "internal_server.ReportMetricsResponse": {
            "type": "object",
            "properties": {
                "high_severity": {
                    "type": "integer",
                    "example": 3
                },
                "low_severity": {
                    "type": "integer",
                    "example": 7
                },
                "medium_severity": {
                    "type": "integer",
                    "example": 10
                },
                "total_reports": {
                    "type": "integer",
                    "example": 20
                }
            }
        },
        "internal_server.RiverProperties": {
            "type": "object"
        },
        "internal_server.RiversResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geometry": {
                                "type": "object"
                            },
                            "properties": {
                                "$ref": "#/definitions/internal_server.RiverProperties"
                            },
                            "type": {
                                "type": "string",
                                "example": "Feature"
                            }
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                }
            }
        },
        "internal_server.SendOTPRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "internal_server.SettingsResponse": {
            "type": "object",
            "properties": {
                "preferences": {
                    "$ref": "#/definitions/internal_server.PreferencesResponse"
                },
                "profile": {
                    "$ref": "#/definitions/internal_server.ProfileResponse"
                }
            }
        },
        "internal_server.SetupAccountRequest": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "password",
                "token",
                "user_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John_doe11"
                },
                "last_name": {
                    "type": "string",
                    "example": "John_doe11"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123{#Pbb"
                },
                "token": {
                    "type": "string",
                    "example": "123e4567e89b12d3a456426614174000"
                },
                "user_name": {
                    "type": "string",
                    "example": "John_doe11"
                }
            }
        },
        "internal_server.SeverityDistributionData": {
            "type": "object",
            "properties": {
                "severity": {
                    "type": "string",
                    "example": "High"
                },
                "site_count": {
                    "type": "integer",
                    "example": 45
                },
                "total_area": {
                    "type": "number",
                    "example": 950.25
                }
            }
        },
        "internal_server.TaskResponse": {
            "type": "object",
            "properties": {
                "aoi_bbox": {
                    "type": "string",
                    "example": "POLYGON((...))"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Illegal mining activity detected"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "locality": {
                    "type": "string",
                    "example": "Tarkwa Mining Zone A"
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED"
                },
                "type": {
                    "type": "string",
                    "example": "REPORT"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-02T12:00:00Z"
                }
            }
        },
        "internal_server.TimeSeriesData": {
            "type": "object",
            "properties": {
                "period": {
                    "type": "string",
                    "example": "2025-07-01T00:00:00Z"
                },
                "value": {
                    "type": "number",
                    "example": 120.5
                }
            }
        },
        "internal_server.UpdateAccountDepartmentRequest": {
            "type": "object",
            "required": [
                "department"
            ],
            "properties": {
                "department": {
                    "type": "string",
                    "example": "Minerals Department"
                }
            }
        },
        "internal_server.UpdateAccountRoleRequest": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "internal_server.UpdateAccountStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE",
                        "PENDING"
                    ],
                    "example": "ACTIVE"
                }
            }
        },
        "internal_server.UpdateAlertReadStatusRequest": {
            "type": "object",
            "required": [
                "is_read"
            ],
            "properties": {
                "is_read": {
                    "type": "boolean"
                }
            }
        },
        "internal_server.UpdateMiningStaticStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "UNDER_REVIEW",
                        "VERIFIED",
                        "FALSE_POSITIVE"
                    ],
                    "example": "VERIFIED"
                }
            }
        },
        "internal_server.UpdatePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "OldPassword123!"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "NewPassword123!"
                }
            }
        },
        "internal_server.UpdatePreferencesRequest": {
            "type": "object",
            "required": [
                "app_theme",
                "coordinate_format",
                "default_mapview",
                "units"
            ],
            "properties": {
                "app_theme": {
                    "type": "string",
                    "enum": [
                        "light",
                        "dark",
                        "system"
                    ],
                    "example": "light"
                },
                "coordinate_format": {
                    "type": "string",
                    "enum": [
                        "dd",
                        "dms"
                    ],
                    "example": "dd"
                },
                "default_mapview": {
                    "$ref": "#/definitions/internal_server.DefaultMapView"
                },
                "notifications_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "units": {
                    "type": "string",
                    "enum": [
                        "metric",
                        "imperial"
                    ],
                    "example": "metric"
                }
            }
        },
        "internal_server.UpdateProfileRequest": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "user_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "profile_url": {
                    "type": "string",
                    "example": "https://s3.amazonaws.com/mybucket/user123.png"
                },
                "user_name": {
                    "type": "string",
                    "example": "dennis_the_menace99"
                }
            }
        },
        "internal_server.UpdateReportStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "IN_REVIEW",
                        "CLOSED",
                        "OPEN"
                    ]
                }
            }
        },
        "internal_server.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "completed"
                }
            }
        },
        "internal_server.VerifyOTPRequest": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "internal_server.renewAccessTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_server.renewAccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                }
            }
        },
        "util.BoundingBox": {
            "type": "object",
            "properties": {
                "xmax": {
                    "type": "number",
                    "example": -1.399792495999975
                },
                "xmin": {
                    "type": "number",
                    "example": -3.109048267999981
                },
                "ymax": {
                    "type": "number",
                    "example": 6.15031057300007
                },
                "ymin": {
                    "type": "number",
                    "example": 4.738773972000047
                }
            }
        },
        "util.Coord": {
            "type": "object",
            "required": [
                "lat",
                "lon"
            ],
            "properties": {
                "lat": {
                    "type": "number",
                    "example": 5.8998
                },
                "lon": {
                    "type": "number",
                    "example": -2.03874
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "github.com/0xdbb/eggsplore API",
	Description:      "API documentation for the github.com/0xdbb/eggsplore service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
