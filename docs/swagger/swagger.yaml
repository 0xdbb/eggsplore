basePath: /api/v1
definitions:
  internal_server.AccountLoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123{#Pbb
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  internal_server.AccountLoginResponse:
    properties:
      access_token:
        description: SessionID             uuid.UUID    `json:"session_id" example:"123e4567-e89b-12d3-a456-426614174000"`
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      access_token_expires_at:
        example: "2025-02-05T13:15:08Z"
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      refresh_token_expires_at:
        example: "2025-02-06T13:15:08Z"
        type: string
      user:
        $ref: '#/definitions/internal_server.AccountResponse'
    type: object
  internal_server.AccountMetricsResponse:
    properties:
      active_users:
        example: 8
        type: integer
      inactive_users:
        example: 0
        type: integer
      pending_invites:
        example: 2
        type: integer
      total_accounts:
        example: 10
        type: integer
    type: object
  internal_server.AccountResponse:
    properties:
      created_at:
        example: "2025-01-01T12:00:00Z"
        type: string
      department:
        example: Minerals Department
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John_doe11
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_active:
        example: "2025-01-02T12:00:00Z"
        type: string
      last_name:
        example: John_doe11
        type: string
      role:
        example: ADMIN
        type: string
      status:
        example: ACTIVE
        type: string
      updated_at:
        example: "2025-01-02T12:00:00Z"
        type: string
      user_name:
        example: John_doe142
        type: string
    type: object
  internal_server.AlertResponse:
    properties:
      account_id:
        example: 223e4567-e89b-12d3-a456-426614174000
        type: string
      created_at:
        example: "2025-06-28T04:08:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_read:
        example: false
        type: boolean
      message:
        example: New mining site detected near river
        type: string
      related_entity_id:
        example: 323e4567-e89b-12d3-a456-426614174000
        type: string
      related_entity_type:
        example: mining_site
        type: string
      type:
        example: new_site
        type: string
    type: object
  internal_server.BulkUpdateAlertsRequest:
    properties:
      alert_ids:
        items:
          type: string
        minItems: 1
        type: array
      is_read:
        type: boolean
    required:
    - alert_ids
    - is_read
    type: object
  internal_server.CitizenReportResponse:
    properties:
      created_at:
        example: "2025-01-01T12:00:00Z"
        type: string
      description:
        example: Illegal mining activity detected in Tarkwa Mining Zone A.
        type: string
      district:
        example: SHAMA
        type: string
      id:
        type: string
      locality:
        example: Akropong
        type: string
      location:
        $ref: '#/definitions/util.Coord'
      severity:
        enum:
        - LOW
        - MEDIUM
        - HIGH
        example: MEDIUM
        type: string
      status:
        enum:
        - OPEN
        - IN_REVIEW
        - RESOLVED
        - CLOSED
        example: PENDING
        type: string
      title:
        example: Illegal Mining Activity
        type: string
      updated_at:
        example: "2025-01-02T12:00:00Z"
        type: string
    required:
    - created_at
    - locality
    - location
    - severity
    - status
    - updated_at
    type: object
  internal_server.ClusterResponse:
    properties:
      centroid:
        type: string
      cluster_id:
        type: string
      report_count:
        type: integer
      report_ids:
        items:
          type: string
        type: array
    type: object
  internal_server.ConcessionProperties:
    properties:
      assets:
        example: 3D model
        type: string
      expiry_date:
        example: "2025-01-01"
        type: string
      name:
        example: Block A
        type: string
      owner:
        example: John Doe
        type: string
      start_date:
        example: "2023-01-01"
        type: string
      status:
        example: OPEN
        type: string
      type:
        example: mining
        type: string
    type: object
  internal_server.ConcessionsResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.ConcessionProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.CreateAccountRequest:
    properties:
      department:
        enum:
        - Minerals Commission
        - Lands Commission
        - Forestry Commission
        - Office of Administrator of Stool lands
        - Environmental commission
        - Goldbod
        - Ghana Police
        - Ghana Army
        - National Security
        - Geological Survey Authority
        - Wildlife Division
        - Ghana Space Science and Technology Institute
        - Water Resources Commission
        - Land Use and Spatial Planning
        - National Anti-Illegal Mining Operations Secretariat
        - GADE Team
        example: Minerals Commission
        type: string
      email:
        description: |-
          UserName  string `json:"user_name" binding:"required" example:"John_doe11"`
          FirstName string `json:"first_name" binding:"required" example:"John"`
          LastName  string `json:"last_name" binding:"required" example:"John"`
          Password  string `json:"password" binding:"required,StrongPassword" example:"password123{#Pbb"`
        example: john.doe@example.com
        type: string
      role:
        enum:
        - ADMIN
        - STANDARD
        example: ADMIN
        type: string
    required:
    - department
    - email
    - role
    type: object
  internal_server.CreateCitizenReportRequest:
    properties:
      description:
        example: Illegal mining activity detected in Tarkwa Mining Zone A.
        type: string
      locality:
        example: Akropong
        type: string
      location:
        $ref: '#/definitions/util.Coord'
      severity:
        enum:
        - LOW
        - MEDIUM
        - HIGH
        example: MEDIUM
        type: string
      title:
        example: Illegal Mining Activity
        type: string
    required:
    - locality
    - location
    - severity
    type: object
  internal_server.CreateTaskRequest:
    properties:
      aoi_bbox:
        $ref: '#/definitions/util.BoundingBox'
      locality:
        example: Tarkwa Mining Zone A
        type: string
    required:
    - aoi_bbox
    - locality
    type: object
  internal_server.DefaultMapView:
    properties:
      lat:
        example: 6.6745
        type: number
      lon:
        example: -1.5716
        type: number
      zoom:
        example: 12
        minimum: 0
        type: integer
    required:
    - lat
    - lon
    - zoom
    type: object
  internal_server.DistrictAreaData:
    properties:
      district:
        example: Ashanti
        type: string
      total_area:
        example: 450.75
        type: number
    type: object
  internal_server.DistrictProperties:
    properties:
      district:
        example: Central District
        type: string
      region:
        example: Ashanti
        type: string
    type: object
  internal_server.DistrictSearchResponse:
    properties:
      result:
        example:
        - Central District
        - Northern District
        items:
          type: string
        type: array
    type: object
  internal_server.DistrictsResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.DistrictProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  internal_server.ForestReserveProperties:
    properties:
      category:
        example: reserve
        type: string
      name:
        example: Reserve A
        type: string
    type: object
  internal_server.ForestReservesResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.ForestReserveProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.GetProfileUploadURLResponse:
    properties:
      file_url:
        example: https://example-bucket.s3.amazonaws.com/profiles/123e4567-e89b-12d3-a456-426614174000/1633036800.jpg
        type: string
      upload_url:
        example: https://example-bucket.s3.amazonaws.com/profiles/123e4567-e89b-12d3-a456-426614174000/1633036800.jpg
        type: string
    type: object
  internal_server.Message:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: Failed to Process Task
        type: string
      message:
        example: Task status updated - COMPLETED
        type: string
      result:
        example: Task processed successfully
        type: string
      task_id:
        example: 1233-flf4djf-alsdik
        type: string
    type: object
  internal_server.Metrics:
    properties:
      total_area_detected:
        example: 1500.75
        type: number
      total_forest_area_affected:
        example: 300.5
        type: number
      total_illegal_sites:
        example: 120
        type: integer
      total_reported_cases:
        example: 75
        type: integer
    type: object
  internal_server.MetricsResponse:
    properties:
      area_over_time:
        items:
          $ref: '#/definitions/internal_server.TimeSeriesData'
        type: array
      detected_mining_change:
        $ref: '#/definitions/internal_server.MonthlyChange'
      districts_by_area:
        items:
          $ref: '#/definitions/internal_server.DistrictAreaData'
        type: array
      forest_reserve_affected_over_time:
        items:
          $ref: '#/definitions/internal_server.TimeSeriesData'
        type: array
      metrics:
        $ref: '#/definitions/internal_server.Metrics'
      reported_cases_change:
        $ref: '#/definitions/internal_server.MonthlyChange'
      reports_over_time:
        items:
          $ref: '#/definitions/internal_server.TimeSeriesData'
        type: array
      severity_distribution:
        items:
          $ref: '#/definitions/internal_server.SeverityDistributionData'
        type: array
    type: object
  internal_server.MiningSiteProperties:
    properties:
      all_violation_types:
        example: RIVER_VIOLATION,FOREST_VIOLATION
        type: string
      area:
        example: 1234.56
        type: number
      detected_date:
        example: "2023-01-01T00:00:00Z"
        type: string
      detection_date:
        example: "2023-01-01T00:00:00Z"
        type: string
      distance_to_forest_m:
        example: 300
        type: number
      distance_to_water_m:
        example: 150
        type: number
      district:
        example: Central District
        type: string
      id:
        example: "12345"
        type: string
      inside_forest_reserve:
        example: false
        type: boolean
      proximity_to_water:
        example: true
        type: boolean
      severity:
        example: HIGH
        type: string
      severity_score:
        example: 5
        type: integer
      severity_type:
        example: RIVER_VIOLATION
        type: string
      status:
        example: OPEN
        type: string
    type: object
  internal_server.MiningSitesResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.MiningSiteProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.MiningStaticResponse:
    properties:
      id:
        example: "12345"
        type: string
      status:
        example: IN_REVIEW
        type: string
    type: object
  internal_server.MonthlyChange:
    properties:
      current_month:
        example: 500
        type: number
      increase_percent:
        example: 100
        type: number
      previous_month:
        example: 250
        type: number
    type: object
  internal_server.PreferencesResponse:
    properties:
      app_theme:
        example: light
        type: string
      coordinate_format:
        example: dd
        type: string
      default_mapview:
        $ref: '#/definitions/internal_server.DefaultMapView'
      notifications_enabled:
        example: true
        type: boolean
      units:
        example: metric
        type: string
    type: object
  internal_server.PriorityIndexHeatmapResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.PriorityIndexProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.PriorityIndexProperties:
    properties:
      type:
        example: heatmap_point
        type: string
      weight:
        example: 0.75
        type: number
    type: object
  internal_server.ProfileResponse:
    properties:
      department:
        example: Environmental
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      profile_url:
        example: https://s3.amazonaws.com/mybucket/user123.png
        type: string
      role:
        example: STANDARD
        type: string
      user_name:
        example: dennis_the_menace99
        type: string
    required:
    - user_name
    type: object
  internal_server.ReportMetricsResponse:
    properties:
      high_severity:
        example: 3
        type: integer
      low_severity:
        example: 7
        type: integer
      medium_severity:
        example: 10
        type: integer
      total_reports:
        example: 20
        type: integer
    type: object
  internal_server.RiverProperties:
    type: object
  internal_server.RiversResponse:
    properties:
      features:
        items:
          properties:
            geometry:
              type: object
            properties:
              $ref: '#/definitions/internal_server.RiverProperties'
            type:
              example: Feature
              type: string
          type: object
        type: array
      type:
        example: FeatureCollection
        type: string
    type: object
  internal_server.SendOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  internal_server.SettingsResponse:
    properties:
      preferences:
        $ref: '#/definitions/internal_server.PreferencesResponse'
      profile:
        $ref: '#/definitions/internal_server.ProfileResponse'
    type: object
  internal_server.SetupAccountRequest:
    properties:
      first_name:
        example: John_doe11
        type: string
      last_name:
        example: John_doe11
        type: string
      password:
        example: password123{#Pbb
        minLength: 8
        type: string
      token:
        example: 123e4567e89b12d3a456426614174000
        type: string
      user_name:
        example: John_doe11
        type: string
    required:
    - first_name
    - last_name
    - password
    - token
    - user_name
    type: object
  internal_server.SeverityDistributionData:
    properties:
      severity:
        example: High
        type: string
      site_count:
        example: 45
        type: integer
      total_area:
        example: 950.25
        type: number
    type: object
  internal_server.TaskResponse:
    properties:
      aoi_bbox:
        example: POLYGON((...))
        type: string
      created_at:
        example: "2025-01-01T12:00:00Z"
        type: string
      description:
        example: Illegal mining activity detected
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      locality:
        example: Tarkwa Mining Zone A
        type: string
      status:
        example: COMPLETED
        type: string
      type:
        example: REPORT
        type: string
      updated_at:
        example: "2025-01-02T12:00:00Z"
        type: string
    type: object
  internal_server.TimeSeriesData:
    properties:
      period:
        example: "2025-07-01T00:00:00Z"
        type: string
      value:
        example: 120.5
        type: number
    type: object
  internal_server.UpdateAccountDepartmentRequest:
    properties:
      department:
        example: Minerals Department
        type: string
    required:
    - department
    type: object
  internal_server.UpdateAccountRoleRequest:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  internal_server.UpdateAccountStatusRequest:
    properties:
      status:
        enum:
        - ACTIVE
        - INACTIVE
        - PENDING
        example: ACTIVE
        type: string
    required:
    - status
    type: object
  internal_server.UpdateAlertReadStatusRequest:
    properties:
      is_read:
        type: boolean
    required:
    - is_read
    type: object
  internal_server.UpdateMiningStaticStatusRequest:
    properties:
      status:
        enum:
        - UNDER_REVIEW
        - VERIFIED
        - FALSE_POSITIVE
        example: VERIFIED
        type: string
    required:
    - status
    type: object
  internal_server.UpdatePasswordRequest:
    properties:
      current_password:
        example: OldPassword123!
        minLength: 8
        type: string
      new_password:
        example: NewPassword123!
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  internal_server.UpdatePreferencesRequest:
    properties:
      app_theme:
        enum:
        - light
        - dark
        - system
        example: light
        type: string
      coordinate_format:
        enum:
        - dd
        - dms
        example: dd
        type: string
      default_mapview:
        $ref: '#/definitions/internal_server.DefaultMapView'
      notifications_enabled:
        example: true
        type: boolean
      units:
        enum:
        - metric
        - imperial
        example: metric
        type: string
    required:
    - app_theme
    - coordinate_format
    - default_mapview
    - units
    type: object
  internal_server.UpdateProfileRequest:
    properties:
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      profile_url:
        example: https://s3.amazonaws.com/mybucket/user123.png
        type: string
      user_name:
        example: dennis_the_menace99
        type: string
    required:
    - first_name
    - last_name
    - user_name
    type: object
  internal_server.UpdateReportStatusRequest:
    properties:
      status:
        enum:
        - IN_REVIEW
        - CLOSED
        - OPEN
        type: string
    required:
    - status
    type: object
  internal_server.UpdateTaskRequest:
    properties:
      status:
        example: completed
        type: string
    type: object
  internal_server.VerifyOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  internal_server.renewAccessTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  internal_server.renewAccessTokenResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
    type: object
  util.BoundingBox:
    properties:
      xmax:
        example: -1.399792495999975
        type: number
      xmin:
        example: -3.109048267999981
        type: number
      ymax:
        example: 6.15031057300007
        type: number
      ymin:
        example: 4.738773972000047
        type: number
    type: object
  util.Coord:
    properties:
      lat:
        example: 5.8998
        type: number
      lon:
        example: -2.03874
        type: number
    required:
    - lat
    - lon
    type: object
info:
  contact: {}
  description: API documentation for the github.com/0xdbb/eggsplore service
  title: github.com/0xdbb/eggsplore API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Get a list of accounts with optional filters
      parameters:
      - description: 'Number of accounts per page (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page_id
        type: integer
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by department
        in: query
        name: department
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.AccountResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Accounts
      tags:
      - accounts-admin
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Account ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Account
      tags:
      - accounts-admin
    get:
      consumes:
      - application/json
      description: Get account by ID
      parameters:
      - description: Account ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Account
      tags:
      - accounts-admin
  /accounts/{id}/department:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Account ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: New Department
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateAccountDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Account Department
      tags:
      - accounts-admin
  /accounts/{id}/role:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Account ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: New Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateAccountRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Account Role
      tags:
      - accounts-admin
  /accounts/{id}/status:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Account ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: New Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateAccountStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Account Status
      tags:
      - accounts-admin
  /accounts/metrics:
    get:
      description: Get total accounts and counts per status (ACTIVE, INACTIVE, PENDING)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.AccountMetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Accounts Metrics
      tags:
      - accounts-admin
  /accounts/register:
    post:
      consumes:
      - application/json
      description: Register a new account
      parameters:
      - description: Create Account Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.AccountResponse'
        "400":
          description: Bad request due to invalid query params
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register Account
      tags:
      - accounts-admin
  /accounts/setup:
    post:
      consumes:
      - application/json
      description: Setup a new account
      parameters:
      - description: Setup Account Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.SetupAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad request due to invalid query params
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Setup Account
      tags:
      - account-client
  /admin/report:
    get:
      description: Get a paginated list of citizen reports with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page_id
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by severity
        in: query
        name: severity
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by district
        in: query
        name: district
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.CitizenReportResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all Citizen Reports
      tags:
      - report
  /admin/report/{id}:
    get:
      description: Get a single citizen report by ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.CitizenReportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a Citizen Report
      tags:
      - report
  /admin/report/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of a citizen report to IN REVIEW or CLOSED
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Report Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateReportStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.CitizenReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Citizen Report Status
      tags:
      - report
  /admin/report/clusters:
    get:
      description: Retrieve clusters of illegal mining reports within a date range,
        ranked by report count
      parameters:
      - default: "2025-01-01T00:00:00Z"
        description: Start date (RFC3339)
        example: "2025-01-01T00:00:00Z"
        in: query
        name: startDate
        required: true
        type: string
      - default: "2025-06-01T00:00:00Z"
        description: End date (RFC3339)
        example: "2025-06-01T00:00:00Z"
        in: query
        name: endDate
        required: true
        type: string
      - default: 500
        description: Clustering distance (meters)
        example: 1000
        in: query
        name: eps
        required: true
        type: number
      - default: 5
        description: Minimum reports per cluster
        example: 5
        in: query
        name: minSamples
        required: true
        type: integer
      - default: 10
        description: Maximum clusters to return
        example: 10
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.ClusterResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Clustered Illegal Mining Reports
      tags:
      - report
  /admin/report/metrics:
    get:
      description: Get total number of reports, and counts per severity level
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.ReportMetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Reports Metrics
      tags:
      - report
  /alerts:
    get:
      consumes:
      - application/json
      description: Get a list of alerts for the authenticated user with optional filters
      parameters:
      - description: 'Number of alerts per page (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page_id
        type: integer
      - description: Filter by alert type (new_site, new_report)
        in: query
        name: type
        type: string
      - description: Filter by read status (true/false)
        in: query
        name: is_read
        type: boolean
      - description: Filter by related entity type (task, reports)
        in: query
        name: related_entity_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.AlertResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Alerts
      tags:
      - alerts
  /alerts/{id}:
    patch:
      consumes:
      - application/json
      description: Update the read status of a specific alert
      parameters:
      - description: Alert ID
        in: path
        name: id
        required: true
        type: string
      - description: Update read status request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateAlertReadStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.AlertResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Alert Read Status
      tags:
      - alerts
  /alerts/bulk-update:
    patch:
      consumes:
      - application/json
      description: Update the read status of multiple alerts
      parameters:
      - description: Bulk update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.BulkUpdateAlertsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk Update Alerts Read Status
      tags:
      - alerts
  /alerts/mark-all-read:
    patch:
      consumes:
      - application/json
      description: Mark all unread alerts as read for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark All Alerts as Read
      tags:
      - alerts
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login account with email and password
      parameters:
      - description: Account Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.AccountLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Login Account
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout account by deleting session and clearing cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Logout Account
      tags:
      - auth
  /auth/renew:
    post:
      consumes:
      - application/json
      description: Generates a new access token using a valid refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: body
        schema:
          $ref: '#/definitions/internal_server.renewAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.renewAccessTokenResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized or Invalid token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Renew Access Token
      tags:
      - auth
  /auth/send-otp:
    post:
      consumes:
      - application/json
      description: Resend OTP to a verified account's email if previous OTP is expired
      parameters:
      - description: Send OTP Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.SendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP resent successfully
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Email not verified or OTP not expired
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "429":
          description: OTP still valid, wait before requesting new one
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Resend OTP
      tags:
      - auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP sent to the account's email and generates access
        and refresh tokens
      parameters:
      - description: OTP Verification Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful verification and login
          schema:
            $ref: '#/definitions/internal_server.AccountLoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Invalid or expired OTP
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Invalid email or OTP
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Verify 2FA OTP to complete login
      tags:
      - auth
  /data/concessions:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of all mining concessions
        with details like name, owner, type, status, assets, start date, and expiry
        date
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.ConcessionsResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to retrieve concessions
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Concessions
      tags:
      - data
  /data/districts:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of all districts with district
        and region information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.DistrictsResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to retrieve districts
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Districts
      tags:
      - data
  /data/districts/search:
    get:
      consumes:
      - application/json
      description: Retrieve a list of district names matching the provided name (case-insensitive
        partial match) or first 10 districts if no name provided
      parameters:
      - description: Name to search for
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.DistrictSearchResponse'
        "400":
          description: Bad Request - Invalid query parameter
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to search districts
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search Districts by Name
      tags:
      - data
  /data/forest-reserves:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of all forest reserves with
        name and category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.ForestReservesResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to retrieve forest reserves
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Forest Reserves
      tags:
      - data
  /data/heatmap-data:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of priority index heatmap
        points for a given date range with type and weight
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.PriorityIndexHeatmapResponse'
        "400":
          description: Bad Request - Invalid or missing date parameters
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to retrieve priority index heatmap
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Priority Index Heatmap
      tags:
      - data
  /data/metrics:
    get:
      consumes:
      - application/json
      description: Retrieve all metrics and chart data for the dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.MetricsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Metrics Data
      tags:
      - data
  /data/mining-sites:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of all mining sites with details
        like ID, district, area, severity, and detection date
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.MiningSitesResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to retrieve mining sites
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Mining Sites
      tags:
      - data
  /data/mining-sites/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of a mining site to  UNDER_REVIEW, FALSE_POSITIVE,
        or VERIFIED
      parameters:
      - description: Mining Site ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Mining Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateMiningStaticStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.MiningStaticResponse'
        "400":
          description: Bad Request - Invalid ID or request body
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to update mining site status
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Mining Site Status
      tags:
      - data
  /data/rivers:
    get:
      consumes:
      - application/json
      description: Retrieve a GeoJSON FeatureCollection of all rivers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.RiversResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Rivers
      tags:
      - data
  /report:
    post:
      consumes:
      - application/json
      description: Create a new citizen report
      parameters:
      - description: Create Citzen Report Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.CreateCitizenReportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_server.CitizenReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a Citizen Report
      tags:
      - report
  /settings:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's profile and preferences
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User Settings
      tags:
      - settings
  /settings/password:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's password
      parameters:
      - description: Password details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - settings
  /settings/preferences:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's preferences
      parameters:
      - description: Preferences
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdatePreferencesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Preferences
      tags:
      - settings
  /settings/preferences/reset:
    post:
      consumes:
      - application/json
      description: Reset the authenticated user's preferences to default values
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.SettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reset User Preferences
      tags:
      - settings
  /settings/profile:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile details
      parameters:
      - description: Profile details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - settings
  /settings/upload-url:
    get:
      consumes:
      - application/json
      description: Generates a presigned S3 URL for uploading a profile image in supported
        formats (JPEG, PNG, WEBP, GIF). Accepts an optional `mime` query parameter
        to specify the desired image MIME type.
      parameters:
      - description: 'MIME type of the image (default: image/jpeg). Allowed: image/jpeg,
          image/png, image/webp, image/gif'
        in: query
        name: mime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Presigned upload URL and public file URL
          schema:
            $ref: '#/definitions/internal_server.GetProfileUploadURLResponse'
        "400":
          description: Invalid request or unsupported MIME type
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate presigned URL for profile image upload
      tags:
      - settings
  /task:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks with pagination. Supports filtering by
        passing `user_id` as a query parameter.
      parameters:
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      - description: Page Number
        in: query
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.TaskResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all created Tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: Create Task Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_server.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Task
      tags:
      - tasks
  /task/{id}:
    get:
      consumes:
      - application/json
      description: Get task by ID
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Task
      tags:
      - tasks
  /task/{id}/status:
    get:
      consumes:
      - application/json
      description: Wait until a task's status changes from PENDING before responding
      parameters:
      - description: Task ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Long Poll Task Status
      tags:
      - tasks
    patch:
      consumes:
      - application/json
      description: Update the status of an existing task
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Update Task Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Task Status
      tags:
      - tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
