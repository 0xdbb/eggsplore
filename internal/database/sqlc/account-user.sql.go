// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account-user.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProfile = `-- name: GetProfile :one
SELECT id, first_name, last_name, user_name, profile_url, email, department, role, is_2fa_enabled, is_approved, password
FROM accounts
WHERE id = $1
`

type GetProfileRow struct {
	ID           uuid.UUID   `json:"id"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	UserName     pgtype.Text `json:"user_name"`
	ProfileUrl   pgtype.Text `json:"profile_url"`
	Email        string      `json:"email"`
	Department   string      `json:"department"`
	Role         string      `json:"role"`
	Is2faEnabled pgtype.Bool `json:"is_2fa_enabled"`
	IsApproved   bool        `json:"is_approved"`
	Password     pgtype.Text `json:"password"`
}

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (GetProfileRow, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i GetProfileRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.ProfileUrl,
		&i.Email,
		&i.Department,
		&i.Role,
		&i.Is2faEnabled,
		&i.IsApproved,
		&i.Password,
	)
	return i, err
}

const getUserSettings = `-- name: GetUserSettings :one
SELECT 
    a.id, a.first_name, a.last_name, a.user_name, a.profile_url, a.email, a.department, a.role, a.is_2fa_enabled, a.is_approved,
    p.account_id, p.units, p.coordinate_format, p.app_theme, p.default_map_view, p.notifications_enabled, p.created_at, p.updated_at
FROM accounts a
LEFT JOIN preferences p ON a.id = p.account_id
WHERE a.id = $1
`

type GetUserSettingsRow struct {
	ID                   uuid.UUID        `json:"id"`
	FirstName            pgtype.Text      `json:"first_name"`
	LastName             pgtype.Text      `json:"last_name"`
	UserName             pgtype.Text      `json:"user_name"`
	ProfileUrl           pgtype.Text      `json:"profile_url"`
	Email                string           `json:"email"`
	Department           string           `json:"department"`
	Role                 string           `json:"role"`
	Is2faEnabled         pgtype.Bool      `json:"is_2fa_enabled"`
	IsApproved           bool             `json:"is_approved"`
	AccountID            pgtype.UUID      `json:"account_id"`
	Units                pgtype.Text      `json:"units"`
	CoordinateFormat     pgtype.Text      `json:"coordinate_format"`
	AppTheme             pgtype.Text      `json:"app_theme"`
	DefaultMapView       []byte           `json:"default_map_view"`
	NotificationsEnabled pgtype.Bool      `json:"notifications_enabled"`
	CreatedAt            pgtype.Timestamp `json:"created_at"`
	UpdatedAt            pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserSettings(ctx context.Context, id uuid.UUID) (GetUserSettingsRow, error) {
	row := q.db.QueryRow(ctx, getUserSettings, id)
	var i GetUserSettingsRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.ProfileUrl,
		&i.Email,
		&i.Department,
		&i.Role,
		&i.Is2faEnabled,
		&i.IsApproved,
		&i.AccountID,
		&i.Units,
		&i.CoordinateFormat,
		&i.AppTheme,
		&i.DefaultMapView,
		&i.NotificationsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetPreferences = `-- name: ResetPreferences :one
UPDATE preferences
SET
    units = 'metric',
    app_theme = 'light',
coordinate_format = 'dd',
    default_map_view = '{"lat": 6.6745, "lon": -1.5716, "zoom": 12}',
    notifications_enabled = TRUE,
    updated_at = now()
WHERE account_id = $1
RETURNING account_id, units, app_theme, default_map_view, coordinate_format, notifications_enabled, created_at, updated_at
`

func (q *Queries) ResetPreferences(ctx context.Context, accountID uuid.UUID) (Preferences, error) {
	row := q.db.QueryRow(ctx, resetPreferences, accountID)
	var i Preferences
	err := row.Scan(
		&i.AccountID,
		&i.Units,
		&i.AppTheme,
		&i.DefaultMapView,
		&i.CoordinateFormat,
		&i.NotificationsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE accounts
SET
    password = $2,
    updated_at = now()
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       uuid.UUID   `json:"id"`
	Password pgtype.Text `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE accounts
SET
    first_name = $2,
    last_name = $3,
    user_name = $4,
    profile_url = $5,
    updated_at = now()
WHERE id = $1
RETURNING id, first_name, last_name, user_name, email, department, password, status, role, is_2fa_enabled, signup_token, signup_token_expires_at, otp_code, otp_expires_at, is_approved, created_at, last_active, updated_at, profile_url
`

type UpdateProfileParams struct {
	ID         uuid.UUID   `json:"id"`
	FirstName  pgtype.Text `json:"first_name"`
	LastName   pgtype.Text `json:"last_name"`
	UserName   pgtype.Text `json:"user_name"`
	ProfileUrl pgtype.Text `json:"profile_url"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Accounts, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.ProfileUrl,
	)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Email,
		&i.Department,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.Is2faEnabled,
		&i.SignupToken,
		&i.SignupTokenExpiresAt,
		&i.OtpCode,
		&i.OtpExpiresAt,
		&i.IsApproved,
		&i.CreatedAt,
		&i.LastActive,
		&i.UpdatedAt,
		&i.ProfileUrl,
	)
	return i, err
}

const upsertPreferences = `-- name: UpsertPreferences :one
INSERT INTO preferences (account_id, units, coordinate_format, app_theme, default_map_view, notifications_enabled, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, now())
ON CONFLICT (account_id)
DO UPDATE SET
    units = EXCLUDED.units,
  coordinate_format = EXCLUDED.coordinate_format,
    app_theme = EXCLUDED.app_theme,
    default_map_view = EXCLUDED.default_map_view,
    notifications_enabled = EXCLUDED.notifications_enabled,
    updated_at = now()
RETURNING account_id, units, app_theme, default_map_view, coordinate_format, notifications_enabled, created_at, updated_at
`

type UpsertPreferencesParams struct {
	AccountID            uuid.UUID   `json:"account_id"`
	Units                pgtype.Text `json:"units"`
	CoordinateFormat     pgtype.Text `json:"coordinate_format"`
	AppTheme             pgtype.Text `json:"app_theme"`
	DefaultMapView       []byte      `json:"default_map_view"`
	NotificationsEnabled pgtype.Bool `json:"notifications_enabled"`
}

func (q *Queries) UpsertPreferences(ctx context.Context, arg UpsertPreferencesParams) (Preferences, error) {
	row := q.db.QueryRow(ctx, upsertPreferences,
		arg.AccountID,
		arg.Units,
		arg.CoordinateFormat,
		arg.AppTheme,
		arg.DefaultMapView,
		arg.NotificationsEnabled,
	)
	var i Preferences
	err := row.Scan(
		&i.AccountID,
		&i.Units,
		&i.AppTheme,
		&i.DefaultMapView,
		&i.CoordinateFormat,
		&i.NotificationsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
